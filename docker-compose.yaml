version: '3.8'

x-airflow-common:
  &airflow-common
  image: airflow-custom:latest  # Use the custom image instead of apache/airflow
  build:
    context: ./Airflow
    dockerfile: Dockerfile  # Reference the Dockerfile to build the image
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
    AIRFLOW__CORE__FERNET_KEY: 'zDL2WLIRqyYO7wDTZUD_PXGFqqha1_kX6PQppVL9pjc='  # Replace with actual key
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session'
    AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
  volumes:
    - ./Airflow/dags:/opt/airflow/dags
    - ./Airflow/logs:/opt/airflow/logs
    - ./Airflow/config:/opt/airflow/config
    - ./Airflow/plugins:/opt/airflow/plugins
    - ./Airflow/requirements.txt:/opt/airflow/requirements.txt  # Ensures requirements.txt is mounted
    - ./Airflow/json_transform:/opt/airflow/json_transform
    - ./Airflow/masterfindata:/opt/airflow/masterfindata
    - ./.env:/opt/airflow/.env 
  user: "${AIRFLOW_UID:-50000}:0"
  depends_on:
    redis:
      condition: service_healthy
    postgres:
      condition: service_healthy

services:
  postgres:
    image: postgres:13
    container_name: airflow-postgres
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 10s
      retries: 5
      start_period: 5s
    restart: always
  streamlit:
      build:
        context: ./Frontend  # Points to Frontend's Dockerfile
      restart: always
      ports:
        - "8501:8501"
      depends_on:
        - airflow-webserver
      environment:
        - STREAMLIT_SERVER_ADDRESS=0.0.0.0
        - STREAMLIT_SERVER_PORT=8501        
      volumes:
        - ./Frontend:/app
        - ./.env:/app/.env
  redis:
    image: redis:7.2-bookworm
    container_name: airflow-redis
    expose:
      - 6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 30s
      retries: 50
      start_period: 30s
    restart: always
  airflow-webserver:
    <<: *airflow-common
    container_name: airflow-webserver
    command: webserver
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD-SHELL", "curl --fail http://localhost:8080/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      airflow-init:
        condition: service_completed_successfully

  airflow-scheduler:
    <<: *airflow-common
    container_name: airflow-scheduler
    command: scheduler
    healthcheck:
      test: ["CMD-SHELL", "curl --fail http://localhost:8080/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      airflow-init:
        condition: service_completed_successfully

  airflow-worker:
    <<: *airflow-common
    container_name: airflow-worker
    command: celery worker
    restart: always
    depends_on:
      airflow-init:
        condition: service_completed_successfully

  airflow-triggerer:
    <<: *airflow-common
    container_name: airflow-triggerer
    command: triggerer
    restart: always
    depends_on:
      airflow-init:
        condition: service_completed_successfully

  airflow-init:
    <<: *airflow-common
    container_name: airflow-init
    entrypoint: /bin/bash
    command:
      - -c
      - |
        echo "Initializing Airflow DB..."
        airflow db upgrade  # Ensures database is properly migrated
        airflow users create \
          --username admin \
          --password admin \
          --firstname Admin \
          --lastname User \
          --role Admin \
          --email admin@example.com
        echo "Installing additional dependencies..."
        pip install --no-cache-dir -r /tmp/requirements.txt
        echo "Airflow Initialization Complete!"
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_MIGRATE: 'true'
    user: "${AIRFLOW_UID:-50000}:0"  # Run as airflow user
    restart: on-failure  # Prevents infinite restart loop
    volumes:
      - ./Airflow:/sources
      - ./requirements.txt:/tmp/requirements.txt  # Mounts requirements.txt for installation

  airflow-cli:
    <<: *airflow-common
    container_name: airflow-cli
    profiles:
      - debug
    environment:
      <<: *airflow-common-env
      CONNECTION_CHECK_MAX_COUNT: "0"
    command:
      - bash
      - -c
      - airflow

volumes:
  postgres-db-volume:
